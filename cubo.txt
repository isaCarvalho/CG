/** CUBO 2*/
    int indices2[] = {0,1,0,2,1,3,2,3,3,6,1,7,0,4,2,5,4,5,5,6,6,7,7,4};
    vec4 P2[8] = {
            {0,0,0,1},
            {2,0,0,1},
            {0,2,0,1},
            {2,2,0,1},
            {0,0,2,1},
            {0,2,2,1},
            {2,2,2,1},
            {2,0,2,1}
    };

    // Model Matrix
    mat4 Model2 = multMM4(multMM4(rotate_y(0.2), rotate_x(0.1)),
                          translate(-0.6, -0.6, -0.6));
    // View Matrix
    mat4 View2 = translate(0, 0, -2);

//     Projection Matrix:
    mat4 Projection2 = frustum(-2,2, -2,2, -2,-4);

    // MVP Matrix
    mat4 M2 = multMM4(multMM4(Projection2, View2), Model2);

    vec4 MP2[8];

    multMV4(M2, P2, 8, MP2);

    draw_elements_lines(img, vermelho, MP2, indices2, 24);

    /** CUBO 1*/
    int indices[] = {0,1,0,2,1,3,2,3,3,6,1,7,0,4,2,5,4,5,5,6,6,7,7,4};
    vec4 P[8] = {
            {0,0,0,1},
            {1,0,0,1},
            {0,1,0,1},
            {1,1,0,1},
            {0,0,1,1},
            {0,1,1,1},
            {1,1,1,1},
            {1,0,1,1}
    };

    // Model Matrix
    mat4 Model = multMM4(multMM4(rotate_y(0.2), rotate_x(0.1)),
                 translate(-0.5, -0.5, -0.5));
    // View Matrix
    mat4 View = translate(0, 0, -2);

//     Projection Matrix:
     mat4 Projection = frustum(-2,2, -2,2, -2,-4);

    // MVP Matrix
    mat4 M = multMM4(multMM4(Projection, View), Model);

    vec4 MP[8];

    multMV4(M, P, 8, MP);

    draw_elements_lines(img, azul, MP, indices, 24);
